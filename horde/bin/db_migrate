#!/usr/bin/env php
<?php
/**
 * Database migration script.
 *
 * Usage: ./db_migrate application [up | down | version [debug]]
 *
 * Copyright 2010 The Horde Project (http://www.horde.org/)
 *
 * See the enclosed file COPYING for license information (LGPL). If you
 * did not receive this file, see http://www.fsf.org/copyleft/lgpl.html.
 *
 * @author Chuck Hagenbuch <chuck@horde.org>
 */

require_once dirname(__FILE__) . '/../lib/Application.php';
Horde_Registry::appInit('horde', array(
    'authentication' => 'none',
    'cli' => true
));

// Parse command line arguments
array_shift($_SERVER['argv']);
$args = $_SERVER['argv'];
if (empty($args[0])) {
    $cli->fatal('Usage: db_migrate application [up | down | version]');
}

$app = $args[0];
if (!in_array($app, $registry->listApps(array('inactive', 'hidden', 'notoolbar', 'admin', 'active'), false, null))) {
    $cli->fatal("$app is not a configured Horde application");
}

$action = 'up';
if (!empty($args[1])) {
    switch ($args[1]) {
    case 'up':
    case 'down':
        $action = $args[1];
        break;

    default:
        $action = 'migrate';
        $targetVersion = $args[1];
        break;
    }
}

// Run
$dir = $registry->get('fileroot', $app) . '/migration/';

$db = $injector->getInstance('Horde_Db_Adapter');
$logger = new Horde_Log_Logger(new Horde_Log_Handler_Stream(STDOUT));
if (!empty($args[2]) && strpos($args[2], 'debug') !== false) {
    $db->setLogger($logger);
}
$migrator = new Horde_Db_Migration_Migrator($db, $logger, array('migrationsPath' => $dir, 'schemaTableName' => $app . '_schema_info'));

$cli->message('Current schema version: ' . $migrator->getCurrentVersion());

try {
    switch ($action) {
    case 'up':
        $cli->message('Migrating DB up.');
        $migrator->up();
        break;

    case 'down':
        $cli->message('Migrating DB down.');
        $migrator->down();
        break;

    case 'migrate':
        $cli->message('Migrating DB to schema version ' . $targetVersion . '.');
        $migrator->migrate($targetVersion);
        break;
    }
} catch (Exception $e) {
    echo $e->getMessage() . "\n";
    exit(1);
}

$cli->message('Ending schema version: ' . $migrator->getCurrentVersion());
