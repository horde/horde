<?php
/**
 * IMP Hooks configuration file.
 *
 * THE HOOKS PROVIDED IN THIS FILE ARE EXAMPLES ONLY.  DO NOT ENABLE THEM
 * BLINDLY IF YOU DO NOT KNOW WHAT YOU ARE DOING.  YOU HAVE TO CUSTOMIZE THEM
 * TO MATCH YOUR SPECIFIC NEEDS AND SYSTEM ENVIRONMENT.
 *
 * For more information please see the horde/config/hooks.php.dist file.
 *
 * $Id$
 */

class IMP_Hooks
{
    /**
     * AUTHENTICATION HOOK: pre-authentication actions.
     *
     * See horde/config/hooks.php.dist for more information.
     *
     * IMP uses the following credentials:
     *   'password' - (string) The password for mail server authentication.
     *   'server' - (string) [optional] Use this server key (see
     *              config/backends.php).
     *   'transparent' - (boolean) If $credentials['authMethod'] is
     *                   'transparent', and you would like IMP to use
     *                   the userId/credentials generated in the
     *                   preauthentication hook, this must be true. If false,
     *                   IMP will try to authenticate using hordeauth.
     */
//     public function preauthenticate($userId, $credentials)
//     {
//         switch ($credentials['authMethod']) {
//         case 'admin':
//             return true;
//
//         case 'authenticate':
//             // Example: Load-balance - pick IMAP server based on first
//             // letter in username. Server entries 'server_[a-z]' must
//             // be defined in config/backends.local.php.
//
//             // $credentials['server'] = 'server_' . substr($userId, 0, 1);
//             // return array(
//             //     'credentials' => $credentials,
//             //     'userId' => $userId
//             // );
//
//             return true;
//
//         case 'transparent':
//             // Example: Always login as 'demo' user, with password 'demo'.
//
//             // return array(
//             //     'credentials' => array(
//             //         'password' => 'demo',
//             //         'transparent' => true
//             //     ),
//             //     'userId' => 'demo'
//             // );
//
//             return true;
//         }
//     }


    /**
     * AUTHENTICATION HOOK: post-authentication actions.
     *
     * See horde/config/hooks.php.dist for more information.
     * See preauthenticate() above for the list of credentials available.
     */
//     public function postauthenticate($userId, $credentials)
//     {
//         return true;
//     }


    /**
     * PREFERENCE INIT: Set preference values on login.
     *
     * See horde/config/hooks.php.dist for more information.
     *
     * MAKE SURE YOU ACTIVATE THE INIT HOOK IN config/prefs.local.php!
     */
//    public function prefs_init($pref, $value, $username, $scope_ob)
//    {
//        switch ($pref) {
//        case 'add_source':
//            // Dynamically set the add_source preference.
//
//            // Example: Useful hook when using a Turba source with shares
//            // enabled (i.e. the example localsql configuration).
//            return is_null($username)
//                ? $value
//                : $GLOBALS['registry']->call('contacts/getDefaultShare');
//
//
//        case 'search_fields':
//        case 'search_sources':
//            // Dynamically set the search_fields/search_sources preferences.
//
//            // Example #1: Use the list of sources defined in the contacts
//            // application (e.g. Turba).
//            if (!is_null($username) &&
//                $GLOBALS['registry']->hasMethod('contacts/sources')) {
//                $sources = $GLOBALS['registry']->call('contacts/sources');
//
//                if ($pref == 'search_fields') {
//                    $out = array();
//                    foreach (array_keys($sources) as $source) {
//                        $out[$source] = array();
//                        foreach ($GLOBALS['registry']->call('contacts/fields', array($source)) as $key => $val){
//                            if ($val['search']) {
//                                $out[$source][] = $key;
//                            }
//                        }
//                    }
//                } else {
//                    $out = array_keys($sources);
//                }
//
//                return json_encode($out);
//            }
//
//            return $value;
//        }
//    }


    /**
     * AJAX HOOK: Add user-defined AJAX action handlers.
     *
     * See horde/config/hooks.php.dist for more information.
     *
     * @param string $action         The AJAX action.
     * @param Horde_Variables $vars  The URL parameters.
     *
     * @return mixed  The data to send to the browser (will be JSON encoded).
     * @throws Horde_Exception
     */
//     public function ajaxaction($action, $vars)
//     {
//        switch ($action) {
//        case 'Foo':
//            return 'bar';
//        }
//
//        throw new Horde_Exception('Unknown action');
//     }


    /**
     * Perform actions on files uploaded for use as compose attachments.
     *
     * This hook is enabled by default.
     *
     * @param string $filename  The filename.
     * @param string $tempfile  The location on the local server of the
     *                          temporary file that contains the attachment
     *                          data.
     * @param string $type      The MIME type as reported by the browser.
     *
     * @return string  The MIME type of the file.
     * @throws IMP_Compose_Exception
     */
     public function compose_attach($filename, $tempfile, $type)
     {
        /* Do MIME type determination for compose attachments. */

        /* By default, we trust the MIME type reported by the browser if it is
         * something other than the generic octet-stream type. */
        if ($type == 'application/octet-stream') {
            /* Try to determine the MIME type from 1) analysis of the file
             * (if available) and, if that fails, 2) from the extension. We
             * do it in this order here because, most likely, if a browser
             * can't identify the type of a file, it is because the file
             * extension isn't available and/or recognized. */
            $type = Horde_Mime_Magic::analyzeFile($tempfile, !empty($GLOBALS['conf']['mime']['magic_db']) ? $GLOBALS['conf']['mime']['magic_db'] : null);
            if (!$type) {
                $type = Horde_Mime_Magic::filenameToMIME($filename, false);
            }
        }

//        // Example: Do a virus scan on the attachment, and reject attachment
//        // if a virus is found.
//        // This example uses the open source ClamAV binary (tested with
//        // v0.96). See: http://www.clamav.net/
//        $clamscan = '/path/to/clamscan';
//        exec($clamscan . ' --quiet ' . escapeshellarg($tempfile), null, $return_var);
//        switch ($return_var) {
//        case 1:
//            // Virus found.
//            throw IMP_Compose_Exception::createAndLog('INFO', 'Virus found in uploaded attachment. Attachment will not be added to the compose message.');
//
//        case 2:
//            // Error occurred.
//            Horde::logMessage('Unknown error when scanning message for virus.', 'INFO');
//            break;
//        }

        return $type;
    }


    /**
     * Perform an action before a message has been sent.
     *
     * If an exception is thrown, sending is cancelled and the exception text
     * will be shown to the user in an error message.
     *
     * @param Horde_Mime_Part $message     The message content object.
     * @param Horde_Mime_Headers $headers  The message headers object.
     * @param IMP_Compose $compose         The compose object.
     *
     * @throws IMP_Compose_Exception
     */
//    public function pre_sent($message, $headers, $compose)
//    {
//        // Example #1: Add custom headers to outgoing message.
//        $custom_hdrs = array();
//
//        /* Add information on organization to which the sender belongs.
//         * Not standardized for use in e-mail, but generally recognized.
//         * See RFC 2076 [3.7]; RFC 1036 [2.2.8] */
//        $custom_hdrs['Organization'] = 'Example Corp.';
//
//        // Add the IP of the remote browser
//        $custom_hdrs['X-Originating-IP'] = $_SERVER['REMOTE_ADDR'];
//
//        // Add the Browser information of the remote browser
//        $custom_hdrs['X-Remote-Browser'] = $_SERVER['HTTP_USER_AGENT'];
//
//        foreach ($custom_hdrs as $key => $val) {
//            $headers->addHeader($key, $val);
//        }
//
//
//        // Example #2: Check for forgotten attachments when sending.
//        if (!count($compose) &&
//            !$GLOBALS['session']->get('imp', 'attach_check/' . strval($compose))) {
//            /* List of words to search for. */
//            $word_list = array(
//                'attachment', 'attached'
//            );
//
//            /* Check the plaintext version of the message. */
//            $imp_contents = new IMP_Contents($message);
//            if (($body_id = $imp_contents->findBody()) &&
//                preg_match('/\b(' . implode('|', array_map('preg_quote', $word_list)) . ')\b/i', $imp_contents->getMIMEPart($body_id)->getContents(), $matches)) {
//                // Set flag in the session to indicate we should not check
//                // this message for attachments again.
//                $GLOBALS['session']->set('imp', 'attach_check/' . strval($compose), 1);
//                throw IMP_Compose_Exception::createAndLog('DEBUG', 'Found the word "' . $matches[1] . '" in the message text although there are no files attached to the message. Did you forget to attach a file?');
//            }
//        }
//    }


    /**
     * Perform an action after a message has been sent successfully.
     *
     * @param Horde_Mime_Part $message     The message content object.
     * @param Horde_Mime_Headers $headers  The message headers object.
     */
//    public function post_sent($message, $headers)
//    {
//        // Do action here -- no return value from this hook.
//    }


    /**
     * Dynamically create the contents of the message trailer text.
     *
     * @return string  The trailer text to be used.
     */
//    public function trailer()
//    {
//        // Example #1: Static trailer text.
//        return "--------------------------------\n" .
//               "This message was sent using IMP.";
//
//
//        // Example #2: Set the trailer from the system taglines file,
//        // located at "/usr/share/tagline" (generated by the "TaRT" utility;
//        // See: http://sourceforge.net/projects/linuxtart/).
//        return file_get_contents('/usr/share/tagline');
//
//
//        // Example #3: Set the trailer using the LDAP directory (entry
//        // 'ispmanDomainSignature').
//        $vdomain = Horde_String::lower(preg_replace('|^.*?\.|i', '', getenv('HTTP_HOST')));
//        $ldapServer = 'localhost';
//        $ldapPort = '389';
//        $searchBase = 'ispmanDomain=' . $vdomain  . ",o=ispman";
//
//        $ds = @ldap_connect($ldapServer, $ldapPort);
//        $searchResult = @ldap_search($ds, $searchBase, 'uid=' . $vdomain);
//        $information = @ldap_get_entries($ds, $searchResult);
//        $trailer = $information[0]['ispmandomainsignature'][0];
//        @ldap_close($ds);
//
//        return $trailer;
//    }


    /**
     * Dynamically set the signature preference.
     *
     * @param string $sig  The signature.
     *
     * @return string  The signature text to use.
     */
//    public function signature($sig)
//    {
//        // Example #1: Set the signature from the system taglines file; the
//        // string "%TAG%" (if present in a user's signature) will be replaced
//        // by the content of the file "/usr/share/tagline" (generated by the
//        // "TaRT" utility).
//        if (preg_match('/%TAG%/', $sig)) {
//            $tag = `cat /usr/share/tagline`;
//            $sig = preg_replace('|%TAG%|', $tag, $sig);
//        }
//        return $sig;
//    }


    /**
     * Add additional message flags in the message listing screen for a
     * mailbox.
     *
     * @param array $data   The overview information for a message as returned
     *                      from the IMP_Mailbox_List::getMailboxArray() call
     *                      (see lib/Mailbox/List.php for documentation on the
     *                      structure of the array).
     * @param string $mode  Either 'imp' or 'dimp'.
     *
     * @return array  An array of additional flags to add. These flags must be
     *                defined in the 'msgflags' preference. On error, return
     *                an empty array.
     */
//    public function msglist_flags($data, $mode)
//    {
//        // Example #1: Add a icon if the message was sent from a user within
//        // the same domain.
//        $flags = array();
//
//        $from_ob = Horde_Mime_Address::getAddressesFromObject($data['envelope']->from, array('charset' => 'UTF-8'));
//        if (!empty($from_ob) &&
//            (strcasecmp($from_ob[0]['host'], 'example.com') === 0)) {
//            /* The '$indomain' flag in this example must have already been
//             * created in the 'msgflags' preference. */
//            $flags = array('$indomain');
//        }
//
//        return $flags;
//    }


    /**
     * When a mailbox is opened in IMP, allow redirection based on the mailbox
     * name.
     *
     * @param string $mailbox  The mailbox which the user has opened.
     *
     * @return string  A valid page within a Horde application which will be
     *                 placed in a "Location" header to redirect the client.
     *                 Return an empty string if the user is not to be
     *                 redirected.
     */
//    public function mbox_redirect($mailbox)
//    {
//        // Example #1: Redirect to various Horde apps based on the mailbox
//        // name.
//        if ((stripos($mailbox, "INBOX/Calendar") !== false) ||
//            preg_match("!^user/[^/]+/Calendar!", $mailbox)) {
//            return Horde::url('', false, array('app' => 'kronolith'));
//        } elseif ((stripos($mailbox, "INBOX/Tasks") !== false) ||
//                  preg_match("!^user/[^/]+/Tasks!", $mailbox)) {
//            return Horde::url('', false, array('app' => 'nag'));
//        } elseif ((strpos($mailbox, "INBOX/Notes") !== false) ||
//                  preg_match("!^user/[^/]+/Notes!", $mailbox)) {
//            return Horde::url('', false, array('app' => 'mnemo'));
//        } elseif ((strpos($mailbox, "INBOX/Contacts") !== false) ||
//                  preg_match("!^user/[^/]+/Contacts!", $mailbox)) {
//            return Horde::url('', false, array('app' => 'turba'));
//        }
//
//        return '';
//
//
//        // Example #2: Kolab defaults.
//        $type = $GLOBALS['injector']->getInstance('Horde_Kolab_Storage')
//            ->getFolder($mailbox)->getType();
//        switch ($type) {
//        case 'event':
//            return Horde::url('', false, array('app' => 'kronolith'));
//
//        case 'task':
//            return Horde::url('', false, array('app' => 'nag'));
//
//        case 'note':
//            return Horde::url('', false, array('app' => 'mnemo'));
//
//        case 'contact':
//            return Horde::url('', false, array('app' => 'turba'));
//
//        case 'prefs':
//            return Horde::getServiceLink('prefs', 'horde');
//
//        default:
//            return '';
//        }
//    }


    /**
     * Allow a custom folder icon to be specified for "standard" mailboxes
     * ("Standard" means all folders except the INBOX, sent-mail folders and
     * trash folders.)
     *
     * @return array  A list of mailboxes, with the name as keys and the
     *                values an array with 'icon' and 'alt' entries.
     *                If a mailbox name doesn't appear in the list, the
     *                default mailbox icon is displayed.
     */
//    public function mbox_icons()
//    {
//        // Example #1: Default Kolab redirection scheme
//        $types = $GLOBALS['injector']->getInstance('Horde_Kolab_Storage')
//            ->getList()->listFolderTypes();
//
//        $icons = array();
//        foreach ($types as $folder => $type) {
//            $t = preg_replace('/\.default$/', '', $type);
//            $f = Horde_String::convertCharset($folder, 'UTF-8', 'UTF7-IMAP');
//            switch ($t) {
//            case 'event':
//                $icons[$f] = array(
//                    'alt' => _("Calendar"),
//                    'icon' => Horde_Themes::img('kronolith.png', 'kronolith')
//                );
//                break;
//
//            case 'task':
//                $icons[$f] = array(
//                    'alt' => _("Tasks"),
//                    'icon' => Horde_Themes::img('nag.png', 'nag')
//                );
//                break;
//
//            case 'note':
//                $icons[$f] = array(
//                    'alt' => _("Notes"),
//                    'icon' => Horde_Themes::img('mnemo.png', 'mnemo')
//                );
//                break;
//
//            case 'contact':
//                $icons[$f] = array(
//                    'alt' => _("Contacts"),
//                    'icon' => Horde_Themes::img('turba.png', 'turba')
//                );
//                break;
//
//            case 'h-prefs':
//                $icons[$f] = array(
//                    'alt' => _("Preferences"),
//                    'icon' => Horde_Themes::img('prefs.png', 'horde')
//                );
//                break;
//            }
//        }
//
//        return $icons;
//    }


    /**
     * Dynamically alter a mailbox display label.
     *
     * @param string $mbox   The mailbox name.
     * @param string $label  The current label.
     *
     * @return string  The display label for $mbox.
     */
//    public function mbox_label($mbox, $label)
//    {
//        // Example #1: Show 'foo' as 'bar'
//        return ($mbox == 'foo')
//            ? 'bar'
//            : $label;
//    }


    /**
     * Mark a mailbox as read-only.
     *
     * @param string $mailbox  The mailbox name.
     *
     * @return boolean  Is the mailbox read-only?
     */
//    public function mbox_readonly($mailbox)
//    {
//        // Example #1: Make messages in the 'foo' mailbox readonly.
//        return ($mailbox == 'foo');
//    }


    /**
     * Determine whether to prompt a user to send a Message Disposition
     * Notification (MDN; a/k/a read-receipt) if their preferences require
     * a prompt.  Useful if MDNs should automatically be sent for a certain
     * subset of messages, e.g. e-mail addresses within the domain.
     *
     * @param Horde_Mime_Headers $headers  A headers object.
     *
     * @return boolean  Should the user be prompted to send a MDN?
     */
//    public function mdn_check($headers)
//    {
//        // Example #1: Don't require MDN prompt if the message is sent by
//        // someone within the same domain (NOTE: this does no checking on
//        // spoofed e-mail addresses; further verification should probably
//        // be done before automatically sending out a MDN).
//        $from = $headers->getOb('from');
//        return (strcasecmp($from['host'], 'example.com') !== 0);
//    }


    /**
     * Allow additional information to be added/edited from the data that is
     * passed to the mailbox display template:
     *   imp: imp/templates/mailbox/mailbox.html
     *   dimp: imp/js/src/mailbox-dimp.js.
     *
     * If you are going to add new columns, you also have to update these
     * fields:
     *   imp: imp/mailbox.php to specify the column width.
     *   dimp: imp/templates/index/dimp.inc to contain the new field in the
     *         header
     *         imp/themes/screen-dimp.css to specify the column width.
     *
     * @param array $msgs   The mailbox data.
     * @param string $view  Either 'imp' or 'dimp'.
     *
     * @return array  The altered array to use in the template.
     */
//    public function mailboxarray($msgs, $view)
//    {
//        // Example #1: Adds a 'foo' entry to each message element.
//        switch ($view) {
//        case 'dimp':
//        case 'imp':
//            foreach (array_keys($msgs) as $key) {
//                $msgs[$key]['foo'] = true;
//            }
//            break;
//        }
//
//        return $msg;
//    }


    /**
     * Dynamically disable composing messages.
     *
     * @return boolean  Is composing disabled?
     */
//    public function disable_compose()
//    {
//        // Example #1: Entirely disable composition.
//        return false;
//    }


    /**
     * Hide specified IMAP mailboxes in folder listings.
     *
     * @param string $mailbox  The mailbox name (UTF7-IMAP).
     *
     * @return boolean  If false, do not display the mailbox.
     */
//    public function display_folder($mailbox)
//    {
//        // Example #1: Do not display the mailbox 'Foo'.
//        return ($mailbox != 'Foo');
//
//
//        // Example #2: Kolab default
//        $types = $GLOBALS['injector']->getInstance('Horde_Kolab_Storage')
//            ->getList()->listFolderTypes();
//        $f = Horde_String::convertCharset($mailbox, 'UTF7-IMAP', 'UTF-8');
//        return empty($types[$f]) || ($types[$f] == 'mail');
//    }


    /**
     * Provide email to use for spam reporting. This is handy for spam
     * reporting software (e.g. DSPAM) which has different e-mail aliases for
     * spam reporting for each user.
     *
     * @param string $action  Either 'spam' or 'ham'.
     *
     * @return string  An e-mail address.
     */
//    public function spam_email($action)
//    {
//        // Example #1: Create e-mail for DSPAM setup.
//        $prefix = ($action == 'spam') ? 'spam-' : 'fp-';
//        return $prefix . $GLOBALS['registry']->getAuth('bare') . '@example.com';
//    }


    /**
     * Perform an action after messages have been reported as spam/ham.
     *
     * @param string $action        Either 'spam' or 'ham'.
     * @param IMP_Indices $indices  The list of indices that have been
                                    reported as spam/ham.
     */
//    public function post_spam($action, $indices)
//    {
//        // Example #1: Copy messages to a (not)spam mailbox. This is the
//        // full mailbox name.
//        $targetMbox = 'foo';
//
//        $imp_message = $GLOBALS['injector']->getInstance('IMP_Message');
//        $imp_message->copy($targetMbox, 'copy', $indices, array('create' => true));
//    }


    /**
     * Determine quota for a user.
     *
     * @param array $params  Parameters for the function, set in backends.php.
     *
     * @return array  Tuple with two members:
     * <pre>
     * first: disk space used (in bytes)
     * second: maximum disk space (in bytes)
     * </pre>
     */
//    public function quota($params = null)
//    {
//        // Example #1: Sample function for returning the quota.
//        // Uses the PECL ssh2 extension.
//        // Requires the 'command' parameter to be defined in backends.php,
//        // which defines the quota reporting function to run on the SSH
//        // host.
//        $imap_ob = $GLOBALS['injector']->getInstance('IMP_Factory_Imap')->create();
//        $host = $imap_ob->ob->getParam('hostspec');
//        $user = $params['host'];
//        $pass = $imap_ob->ob->getParam('password');
//        $command = $params['command'];
//
//        $session = ssh2_connect($host);
//        if (!$session) {
//            throw new IMP_Exception(_("Connection to server failed."));
//        }
//
//        if (!ssh2_auth_password($session, $user, $pass)) {
//            throw new IMP_Exception(_("Authentication failed."));
//        }
//
//        $stream = ssh2_exec($session, $command, false);
//        stream_set_blocking($stream, true);
//
//        $quota = preg_split('/\s+/', trim(stream_get_contents($stream)), 2);
//        return array($quota[1] * 1024, $quota[2] * 1024);
//    }


    /**
     * Retrieves public S/MIME keys of message recipients.
     *
     * The hook will be called first when searching for the keys, and further
     * lookup techniques will only be used if the hook throws an exception or
     * returns an empty result.
     *
     * @param string $address  The email address of the recipient.
     *
     * @return string  The base64-encoded public S/MIME key that matches the
     *                 email address.
     */
//    public function smime_key($address)
//    {
//        $ldapServer = 'localhost';
//        $ldapPort = 389;
//        $searchBase = 'ou=users,dc=example,dc=com';
//        $binddn = 'uid=admin,dc=example,dc=com';
//        $bindpw = 'secret';
//        $attribute = 'simepublickey';
//
//        if (!@ldap_connect($ldapServer, $ldapPort)) {
//            return;
//        }
//        if (!@ldap_set_option($ds, LDAP_OPT_PROTOCOL_VERSION, 3)) {
//            return;
//        }
//        if (!@ldap_bind($ds, $binddn, $bindpw)) {
//            return;
//        }
//
//        $searchResult = @ldap_search($ds, $searchBase, 'mail=' . $address);
//        $information = @ldap_get_entries($ds, $searchResult);
//        ldap_close($ds);
//
//        if ($information === false || $information['count'] == 0) {
//            return;
//        }
//
//        return $information[0][$attribute][0];
//    }


    /**
     * Retrieves public PGP keys of message recipients.
     *
     * The hook will be called first when searching for the keys, and further
     * lookup techniques will only be used if the hook throws an exception or
     * returns an empty result.
     *
     * @param string $address  The email address of the recipient.
     * @param string $keyid    The PGP key id of the recipient.
     *
     * @return string  The base64-encoded public PGP key that matches either
     *                 the email address or the fingerprint.
     */
//    public function pgp_key($address, $keyid)
//    {
//        $ldapServer = 'localhost';
//        $ldapPort = 389;
//        $searchBase = 'ou=users,dc=example,dc=com';
//        $binddn = 'uid=admin,dc=example,dc=com';
//        $bindpw = 'secret';
//        $attribute = 'pgppublickey';
//
//        if (!@ldap_connect($ldapServer, $ldapPort)) {
//            return;
//        }
//        if (!@ldap_set_option($ds, LDAP_OPT_PROTOCOL_VERSION, 3)) {
//            return;
//        }
//        if (!@ldap_bind($ds, $binddn, $bindpw)) {
//            return;
//        }
//
//        $searchResult = @ldap_search($ds, $searchBase, 'mail=' . $address);
//        $information = @ldap_get_entries($ds, $searchResult);
//        ldap_close($ds);
//
//        if ($information === false || $information['count'] == 0) {
//            return;
//        }
//
//        return $information[0][$attribute][0];
//    }


    /**
     * DIMP: Allow additional information to be added to the array that is
     * passed to the message text display template:
     *   imp/templates/dimp/message/message.html.
     *
     * @param array $msg  The current entry array (see the showMessage()
     *                    function in lib/Views/ShowMessage.php for the
     *                    format.
     *
     * @return array  The altered array to use in the template.
     */
//    public function dimp_messageview($msg)
//    {
//        // Example #1: Add a new foo variable
//        $msg['foo'] = '<div class="foo">BAR</div>';
//        return $msg;
//    }


    /**
     * DIMP: Allows additional information to be added to the preview view and
     * its corresponding template:
     *   imp/templates/index/index-dimp.inc.
     *
     * Since the preview pane is dynamically updated via javascript, all
     * updates other than the base entries must be provided in javascript code
     * to be run at update time.
     *
     * @param array $msg  The current entry array (see the showMessage()
     *                    function in lib/Views/ShowMessage.php for the
     *                    format.
     *
     * @return array  A 2 element array - the first element is the original
     *                array with any changes made to the initial data. The
     *                second element is an array of javascript commands, one
     *                command per array value.
     */
//    public function dimp_previewview($msg)
//    {
//        // Example #1: Alter the subject
//        $msg['subject'] .= 'test';
//
//        // Example #2: Update the DOM ID 'foo' with the value 'bar'. 'foo'
//        // needs to be manually added to the HTML template.
//        $js_code = array(
//            "$('foo').update('bar')"
//        );
//
//        return array($msg, $js_code);
//    }


    /**
     * DIMP: Allows alteration of address formatting in email message headers.
     *
     * @param stdClass $ob  Object with the following possible properties:
     * <pre>
     * 'address' - Full address
     * 'display' - Display address
     * 'host' - Host name
     * 'inner' - Trimmed, bare address
     * 'personal' - Personal string
     * </pre>
     *
     * @return string  The raw string to display for that address. This value
     *                 must be properly escaped (i.e. htmlspecialchars() used
     *                 on the portions of the string where appropriate).
     */
//    public function dimp_addressformatting($ob)
//    {
//         // Example #1: Display only the raw text of the personal name
//         // or, if not set, the e-mail address.
//         return empty($ob['personal']) ? $ob['address'] : $ob['personal'];
//    }


    /**
     * MIMP: Activate various advanced features in the mobile view.
     *
     * The combination of the rapid pace of development for both mobile
     * devices and their browsers, coupled with the limited resources of an
     * open source project to test and track these developments, make it
     * near impossible to accurately identify a list of mobile browsers
     * that can handle a interface with more features than the base
     * mobile view. Therefore, this hook provides a way for a site
     * administrator to best decide when (and if) they want to allow this
     * advanced functionality to be available in the mobile view.
     *
     * @param string $feature  The advanced feature. One of the following:
     * <pre>
     * 'checkbox' - Adds a checkbox interface to selecting messages on the
     *              mailbox listing page.
     * </pre>
     *
     * @return boolean  If true, activates the feature. By default, these
     *                  advanced features are NOT active.
     */
//     public function mimp_advanced($feature)
//     {
//         switch ($feature) {
//         case 'checkbox':
//             // Activate the mailbox checkbox interface.
//             return true;
//
//         case 'compose_attach':
//             // Activate the compose attachment interface.
//             return true;
//         }
//
//         return false;
//     }

}
